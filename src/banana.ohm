Banana {
  Program = Stmt+

  Stmt = VarDecl
       | FunDecl
       | Assignment 
       | Primitive_call        -- call
       | IfStmt 
       | WhileStmt 
       | ForStmt
       | ReturnStmt

  VarDecl = let Type id "=" Exp
  FunDecl = func id "(" Params ")" "->" Type Body
  

  Params = ListOf<Param, ",">
  Param = Type id ("=" Exp)?
  Body = ":" Stmt+ "|"

  Type = array "(" Type ")"   -- array
       | boolean              -- boolean
       | void                 -- void
       | int                  -- int
       | string               -- string
       | id                   -- modeltype

  Assignment = Primitive "=" Exp      

  ReturnStmt = return Exp         
  ForStmt = for id in Exp Body     -- collection
  WhileStmt = while Exp Body

  IfStmt = if Exp Body else Body                  -- long
         | if Exp Body else IfStmt                -- elsif
         | if Exp Body                            -- short

  Args = ListOf<Exp, ",">

  Exp       = ("-" | "!") Primitive                         -- unary 									
            | Exp1 "?" "->" Exp1 "->>" Exp                  -- ternary
            | Exp1
  Exp1      = Exp1 "||" Exp2                                -- binary
            | Exp2
  Exp2      = Exp2 "&&" Exp3                                -- binary
            | Exp3
  Exp3      = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4       -- binary
            | Exp4
  Exp4      = Exp4 ("+" | "-") Exp5                         -- binary
            | Exp5
  Exp5      = Exp5 ("*" | "/" | "%") Exp6                   -- binary
            | Exp6
  Exp6      = Primitive "**" Exp6                                -- binary
            | Primitive
  Primitive = "(" Exp ")"                                   -- parens
            |"(" NonemptyListOf<Exp, ","> ")"             -- arrayexp
            | num                                          -- num
            | true               					    -- true
            | false								    -- false
            | id "(" ListOf<Exp, ","> ")"                  -- call
            | id "!"?                                      -- id
            | stringlit                                    -- string
            | void                                    -- void



  relop = "<=" | "<" | ">=" | ">" | "==" | "!="

  string = "String" ~idchar 
  int = "Int" ~idchar
  boolean = "Boo" ~idchar
  array = "Bunch" ~idchar
  func = "pick" ~idchar
  let = "let" ~idchar
  self = "self" ~idchar
  enum = "enum" ~idchar
  while = "while" ~idchar
  if = "if" ~idchar
  else = "else" ~idchar
  elif = "elif" ~idchar
  switch = "switch" ~idchar
  case = "case" ~idchar
  default = "default" ~idchar
  return = "serve" ~idchar
  try = "try" ~idchar
  catch = "catch" ~idchar
  throw = "throw" ~idchar
  repeat = "repeat" ~idchar
  for = "for" ~idchar
  void = "Nothing" ~idchar
  null = "null" ~idchar
  true = "ripe" ~alnum
  false = "rotten" ~alnum
  in = "in" ~idchar
  ctor = "constructor" ~idchar


  keyword = string | int | boolean | array | func | let | self
          | enum | while | if | else | switch | case | default | return | for | void
          | null | true | false | in | ctor 

  id = ~keyword letter idchar*
  idchar = alnum | "-" 
  num = digit+ ("." digit+)? (("e" | "E") ("+" | "-")? digit+)?

  stringlit = "\'" char* "\'"
  char = "\\u{" hexDigit+ "}"   --codepoint
       | "\\" any               --nonbackslash
       | ~"\'" any

  space += "//" (~"\n" any)*  --comment
}