Banana {
  Program = Stmt+
  
  Stmt = FunDecl
  	  | ModelDecl
       | Assignment 
       | CallStmt 
       | IfStmt 
       | WhileStmt 
       | ForStmt
       | ReturnStmt
       | PrintStmt
  
  FunDecl = func id "(" Params ")" "->" Type ":" Body
  ModelDecl = model id ":" Config (Assignment | FunDecl)*
  Config = config "(" Params ")" ":" Body

  Params = ListOf<Param, ",">
  Param = Type id ("=" Exp)?
  Body = Stmt+

  Type = array "(" Type ")"   -- array
       | boolean              -- boolean
       | void                 -- void
       | int                  -- int
       | string               -- string
       | id                   -- modeltype

  Assignment = let Type id "=" (CallStmt | Exp)  -- vardecl
  			 | self "." id "=" Exp            -- membervar
                | id "=" Exp                     -- reassignment
             
  ReturnStmt = return Exp 
  CallStmt = Call                -- funcall
  		   | id ("." Call)+    -- methodcall
  PrintStmt = print "(" Exp? ")"
  
  ForStmt = for id in Exp ":" Body
  WhileStmt = while Exp ":" Body
  IfStmt = if Exp ":" Body elif Exp ":" Body else ":" Body  -- elif_with_else
         | if Exp ":" Body elif Exp ":" Body                -- elif
  	    | if Exp ":" Body else ":" Body                    -- with_else
         | if Exp ":" Body else ":" IfStmt                  -- nested_if
         | if Exp ":" Body                                  -- plain_if
         

  Call = id "(" Args ")"
  Args = ListOf<Exp, ",">

  Exp       = ("-" | "!") Primitive                         -- unary 									
            | Exp1 "?" "->" Exp1 "->>" Exp                  -- ternary
            | Exp1
  Exp1      = Exp1 "||" Exp2                                -- binary
            | Exp2
  Exp2      = Exp2 "&&" Exp3                                -- binary
            | Exp3
  Exp3      = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4       -- binary
            | Exp4
  Exp4      = Exp4 ("+" | "-") Exp5                         -- binary
            | Exp5
  Exp5      = Exp5 ("*" | "/" | "%") Exp6                   -- binary
            | Exp6
  Exp6      = Primitive "**" Exp6                                -- binary
            | Primitive
  Primitive = "(" NonemptyListOf<Exp, ","> ")"             -- arrayexp
            |"(" Exp ")"                                   -- parens
            | num                                          -- num
            | true               					    -- true
            | false								    -- false
            | CallStmt                                     -- call
            | id "!"?                                      -- id
            | stringlit                                    -- string
            


  relop = "<=" | "<" | ">=" | ">" | "==" | "!="
  
  string = "String" ~idchar 
  int = "Int" ~idchar
  print = "Plant" ~idchar
  boolean = "Boo" ~idchar
  array = "Bunch" ~idchar
  func = "pick" ~idchar
  let = "let" ~idchar
  model = "model" ~idchar
  config = "config" ~idchar
  self = "self" ~idchar
  enum = "enum" ~idchar
  while = "while" ~idchar
  if = "if" ~idchar
  else = "else" ~idchar
  elif = "elif" ~idchar
  switch = "switch" ~idchar
  case = "case" ~idchar
  default = "default" ~idchar
  return = "serve" ~idchar
  try = "try" ~idchar
  catch = "catch" ~idchar
  throw = "throw" ~idchar
  repeat = "repeat" ~idchar
  for = "for" ~idchar
  void = "Nothing" ~idchar
  null = "null" ~idchar
  true = "ripe" ~idchar
  false = "rotten" ~idchar
  in = "in" ~idchar
  ctor = "constructor" ~idchar

  
  keyword = string | int | print | boolean | array | func | let | model | config | self
          | enum | while | if | else | switch | case | default | return | for | void
          | null | true | false | in | ctor 
         
  id = ~keyword letter idchar*
  idchar = alnum | "-" 
  num = digit+ ("." digit+)? (("e" | "E") ("+" | "-")? digit+)?

  stringlit = "\'" char* "\'"
  char = "\\u{" hexDigit+ "}"   --codepoint
       | "\\" any               --nonbackslash
       | ~"\'" any
       
  space += "//" (~"\n" any)*  --comment
}